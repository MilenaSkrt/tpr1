import math
import matplotlib.pyplot as plt
import numpy as np

def f(x):
    return x ** 2 - 2 * x - 2 * math.cos(x)


# Шаг 1: Определение начального интервала для поиска минимума
a = 0.5  # Левая граница интервала
b = 1  # Правая граница интервала

# Шаг 2: Определение точности вычислений
eps = 1e-6  # Если ширина интервала меньше eps, то поиска завершается

iterations = 0

# Шаг 3: Использование метода деления интервала (метод ломанных)
while abs(b - a) >= eps:  # Продолжаем, пока ширина интервала больше заданной точности
    mid = (a + b) / 2  # Находим середину текущего интервала
    h = 0.001  # Небольшое значение для вычисления производной
    f1 = f(mid)  # Значение функции в середине интервала
    f2 = f(mid + h)  # Значение функции чуть правее середины

    # Шаг 5: Обновление границ интервала в зависимости от значений функции
    if f1 < f2:  # Если значение функции в середине меньше, чем справа
        b = mid  # Сужаем интервал вправо
    else:
        a = mid  # Сужаем интервал влево

    iterations += 1  # Увеличиваем счетчик итераций

x_min = (a + b) / 2  # Находим приблизительное местоположение минимума
f_min = f(x_min)  # Вычисляем значение функции в точке минимума


print(f"Минимум функции находится в точке x = {x_min}, f(x) = {f_min}")
print(f"Количество итераций: {iterations}")

# Построение графика функции
x_values = np.linspace(-5, 5, 100)  # Генерируем значения x от -5 до 5
y_values = f(x_values)  # Вычисляем значения функции для каждого x

plt.figure(figsize=(10, 6))
plt.plot(x_values, y_values, label='f(x) = x^2 - 2x - 2cos(x)', color='blue')
plt.scatter(x_min, f_min, color='red', label=f'Минимум: ({x_min:.4f}, {f_min:.4f})')
plt.title('График функции с точкой минимума')
plt.xlabel('x') 
plt.ylabel('f(x)')
plt.axhline(0, color='black', lw=0.5, ls='--')
plt.axvline(0, color='black', lw=0.5, ls='--')
plt.legend()
plt.grid()
plt.show()
